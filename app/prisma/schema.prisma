generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(PLAYER)
  dateOfBirth   DateTime?
  parentId      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  parent        User?     @relation("ParentChild", fields: [parentId], references: [id])
  children      User[]    @relation("ParentChild")
  
  // Player-specific relations
  playerProfile     PlayerProfile?
  scheduleEntries   ScheduleEntry[]
  workouts          Workout[]
  drillCompletions  DrillCompletion[]
  workoutCompletions WorkoutCompletion[]
  voiceNotes        VoiceNote[]
  mediaUploads      MediaUpload[]
  drillComments     DrillComment[]
  customDrills      Drill[]
  achievements      UserAchievement[]
  notifications     Notification[]
  aiInteractions    AIInteraction[]
  progressEntries   ProgressEntry[]
  userChallenges    UserChallenge[]
  userLevels        UserLevel[]
  userGoals         UserGoal[]
  userWeeklyGoals   UserWeeklyGoal[]
  customLevels      Level[]
  customGoals       Goal[]
  customWeeklyGoals WeeklyGoal[]
}

model PlayerProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  skillLevel      String   @default("beginner")
  favoritePosition String?
  totalPoints     Int      @default(0)
  currentLevel    String   @default("rookie")
  currentStreak   Int      @default(0)
  longestStreak   Int      @default(0)
  lastActiveDate  DateTime?
  avatarItems     Json?
  goals           Json?
  preferences     Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Drill {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String
  category      String
  skillLevel    String
  duration      String
  equipment     String
  stepByStep    String
  coachingTips  String
  videoUrl      String?
  alternativeVideos String
  isCustom      Boolean  @default(false)
  createdBy     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  workoutDrills    WorkoutDrill[]
  drillCompletions DrillCompletion[]
  scheduleEntries  ScheduleEntry[]
  voiceNotes       VoiceNote[]
  mediaUploads     MediaUpload[]
  drillComments    DrillComment[]
  creator          User?    @relation(fields: [createdBy], references: [id])
}

model Workout {
  id          String   @id @default(cuid())
  name        String
  description String?
  totalDuration Int    @default(0)
  userId      String
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutDrills   WorkoutDrill[]
  scheduleEntries ScheduleEntry[]
  workoutCompletions WorkoutCompletion[]
}

model WorkoutDrill {
  id        String @id @default(cuid())
  workoutId String
  drillId   String
  order     Int
  duration  Int?
  notes     String?

  workout Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  drill   Drill   @relation(fields: [drillId], references: [id], onDelete: Cascade)

  @@unique([workoutId, drillId])
}

model ScheduleEntry {
  id          String       @id @default(cuid())
  userId      String
  date        DateTime
  startTime   DateTime
  endTime     DateTime?
  status      ScheduleStatus @default(SCHEDULED)
  drillId     String?
  workoutId   String?
  notes       String?
  completedAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  drill        Drill?       @relation(fields: [drillId], references: [id])
  workout      Workout?     @relation(fields: [workoutId], references: [id])
  completions  DrillCompletion[]
}

model DrillCompletion {
  id              String    @id @default(cuid())
  userId          String
  drillId         String
  scheduleEntryId String?
  completedAt     DateTime  @default(now())
  duration        Int       // in seconds
  performance     Json?     // stores performance metrics
  aiAnalysis      Json?     // AI feedback and analysis
  feedback        String?
  rating          Int?      // 1-5 stars

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  drill         Drill          @relation(fields: [drillId], references: [id], onDelete: Cascade)
  scheduleEntry ScheduleEntry? @relation(fields: [scheduleEntryId], references: [id])
  voiceNotes    VoiceNote[]
  mediaUploads  MediaUpload[]
}

model WorkoutCompletion {
  id              String    @id @default(cuid())
  userId          String
  workoutId       String
  completedAt     DateTime  @default(now())
  totalDuration   Int       // in seconds
  completedDrills Int       // number of drills completed
  rating          Int?      // 1-5 stars
  feedback        String?
  performance     Json?     // stores performance metrics

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  workout Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
}

model VoiceNote {
  id                String  @id @default(cuid())
  userId            String
  drillId           String
  drillCompletionId String?
  audioUrl          String
  transcript        String?
  duration          Int     // in seconds
  createdAt         DateTime @default(now())

  // Relations
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  drill           Drill            @relation(fields: [drillId], references: [id], onDelete: Cascade)
  drillCompletion DrillCompletion? @relation(fields: [drillCompletionId], references: [id])
}

model MediaUpload {
  id                String    @id @default(cuid())
  userId            String
  drillId           String
  drillCompletionId String?
  mediaType         MediaType
  fileUrl           String
  thumbnailUrl      String?
  filename          String
  fileSize          Int       // in bytes
  duration          Int?      // for videos, in seconds
  analysis          Json?     // AI analysis results
  feedback          String?
  parentNotified    Boolean   @default(false)
  reviewedBy        String?   // parent/coach who reviewed
  reviewedAt        DateTime?
  createdAt         DateTime  @default(now())

  // Relations
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  drill           Drill            @relation(fields: [drillId], references: [id], onDelete: Cascade)
  drillCompletion DrillCompletion? @relation(fields: [drillCompletionId], references: [id])
}

model DrillComment {
  id        String   @id @default(cuid())
  userId    String
  drillId   String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  drill Drill @relation(fields: [drillId], references: [id], onDelete: Cascade)
}

model Achievement {
  id          String @id @default(cuid())
  name        String @unique
  description String
  icon        String
  criteria    String
  rarity      String
  points      Int    @default(0)
  category    String
  createdAt   DateTime @default(now())

  // Relations
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  progress      Int      @default(100)

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AIInteraction {
  id          String            @id @default(cuid())
  userId      String
  type        AIInteractionType
  input       String
  output      String
  context     Json?
  feedback    String?
  createdAt   DateTime          @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProgressEntry {
  id          String   @id @default(cuid())
  userId      String
  skillType   String
  skillName   String
  value       Float
  unit        String
  date        DateTime @default(now())
  context     Json?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Challenge {
  id          String      @id @default(cuid())
  name        String      @unique
  description String
  type        ChallengeType
  criteria    Json
  reward      Json
  timeLimit   Int?        // in hours
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  expiresAt   DateTime?

  // Relations
  userChallenges UserChallenge[]
}

model UserChallenge {
  id          String          @id @default(cuid())
  userId      String
  challengeId String
  status      ChallengeStatus @default(ACTIVE)
  progress    Int             @default(0)
  startedAt   DateTime        @default(now())
  completedAt DateTime?

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId])
}

// New comprehensive reward system models
model Level {
  id          String   @id @default(cuid())
  levelNumber Int      @unique
  name        String   @unique
  description String
  pointsRequired Int
  badgeIcon   String?
  badgeColor  String?
  rewards     Json?    // Special rewards for completing the level
  isCustom    Boolean  @default(false)
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  goals       Goal[]
  userLevels  UserLevel[]
  creator     User?    @relation(fields: [createdBy], references: [id])
}

model Goal {
  id          String   @id @default(cuid())
  levelId     String
  goalNumber  Int      // 1-10, with 10 being the level test
  name        String
  description String
  type        GoalType
  criteria    Json     // Specific criteria for completion
  points      Int      @default(0)
  isLevelTest Boolean  @default(false) // True for goal #10
  isCustom    Boolean  @default(false)
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  level       Level         @relation(fields: [levelId], references: [id], onDelete: Cascade)
  userGoals   UserGoal[]
  creator     User?         @relation(fields: [createdBy], references: [id])

  @@unique([levelId, goalNumber])
}

model UserLevel {
  id          String      @id @default(cuid())
  userId      String
  levelId     String
  status      LevelStatus @default(LOCKED)
  progress    Int         @default(0) // Percentage completion
  startedAt   DateTime?
  completedAt DateTime?
  totalPoints Int         @default(0)

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  level       Level       @relation(fields: [levelId], references: [id], onDelete: Cascade)

  @@unique([userId, levelId])
}

model UserGoal {
  id          String     @id @default(cuid())
  userId      String
  goalId      String
  status      GoalStatus @default(LOCKED)
  progress    Int        @default(0)
  startedAt   DateTime?
  completedAt DateTime?
  pointsEarned Int       @default(0)

  // Relations
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  goal        Goal       @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@unique([userId, goalId])
}

model WeeklyGoal {
  id          String           @id @default(cuid())
  name        String
  description String
  type        WeeklyGoalType
  criteria    Json
  points      Int              @default(0)
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean          @default(true)
  isCustom    Boolean          @default(false)
  createdBy   String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  userWeeklyGoals UserWeeklyGoal[]
  creator         User?            @relation(fields: [createdBy], references: [id])
}

model UserWeeklyGoal {
  id          String           @id @default(cuid())
  userId      String
  weeklyGoalId String
  status      WeeklyGoalStatus @default(ACTIVE)
  progress    Int              @default(0)
  startedAt   DateTime         @default(now())
  completedAt DateTime?
  pointsEarned Int             @default(0)

  // Relations
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  weeklyGoal  WeeklyGoal       @relation(fields: [weeklyGoalId], references: [id], onDelete: Cascade)

  @@unique([userId, weeklyGoalId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Enums
enum UserRole {
  PARENT
  PLAYER
}

enum ScheduleStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  MISSED
}

enum NotificationType {
  REMINDER
  ACHIEVEMENT
  PARENT_NOTIFICATION
  SYSTEM
  AI_FEEDBACK
  MEDIA_UPLOAD
}

enum AIInteractionType {
  DRILL_RECOMMENDATION
  VIDEO_ANALYSIS
  MOTIVATIONAL_MESSAGE
  COACHING_TIP
  CHAT_CONVERSATION
  PROGRESS_INSIGHT
}

enum ChallengeType {
  DAILY
  WEEKLY
  MONTHLY
  SPECIAL
}

enum ChallengeStatus {
  ACTIVE
  COMPLETED
  EXPIRED
  ABANDONED
}

// New enums for reward system
enum GoalType {
  DRILL_COMPLETION
  SKILL_PRACTICE
  STREAK_MAINTENANCE
  POINTS_ACCUMULATION
  LEVEL_TEST
  CUSTOM_CHALLENGE
  TEAM_PARTICIPATION
  IMPROVEMENT_TRACKING
}

enum LevelStatus {
  LOCKED
  UNLOCKED
  IN_PROGRESS
  COMPLETED
}

enum GoalStatus {
  LOCKED
  UNLOCKED
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum WeeklyGoalType {
  PRACTICE_FREQUENCY
  SKILL_FOCUS
  DRILL_VARIETY
  CONSISTENCY
  IMPROVEMENT
  TEAM_ACTIVITY
  CUSTOM
}

enum WeeklyGoalStatus {
  ACTIVE
  COMPLETED
  EXPIRED
  ABANDONED
}

enum MediaType {
  VIDEO
  IMAGE
}
