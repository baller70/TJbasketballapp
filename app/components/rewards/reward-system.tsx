'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { ChevronDown, ChevronUp, Edit, Trophy, Target, Clock, BookOpen, Lightbulb, AlertTriangle, Play, Video, User, Calendar, Award, Plus, Trash2, BarChart3, TrendingUp, Star, MessageSquare } from 'lucide-react';
import GoalEditDialog from '@/components/ui/goal-edit-dialog';
import WeeklyGoalEditDialog from '@/components/ui/weekly-goal-edit-dialog';
import ChallengeEditDialog from '@/components/ui/challenge-edit-dialog';
import { useToast } from '@/hooks/use-toast';

interface UserProgress {
  status: 'LOCKED' | 'AVAILABLE' | 'IN_PROGRESS' | 'COMPLETED';
  progress: number;
  currentValue: number;
  personalBest?: number;
  attempts: number;
  lastAttempt?: string;
}

interface Goal {
  id: string;
  name: string;
  description: string;
  detailedDescription: string;
  instructions: string[];
  skillRequirements: string[];
  tips: string[];
  commonMistakes: string[];
  relatedDrills: string[];
  videoReferences: string[];
  estimatedTime: number;
  difficulty: 'BEGINNER' | 'INTERMEDIATE' | 'ADVANCED' | 'EXPERT';
  type: string;
  targetValue: number;
  targetUnit: string;
  points: number;
  isLevelTest?: boolean;
  personalNotes: string;
  customCriteria: string;
  userProgress: UserProgress;
}

interface Level {
  id: string;
  levelNumber: number;
  name: string;
  description: string;
  pointsRequired: number;
  badgeIcon: string;
  badgeColor: string;
  rewards: string[];
  userProgress: {
    status: 'LOCKED' | 'AVAILABLE' | 'IN_PROGRESS' | 'COMPLETED';
    progress: number;
    completedGoals: number;
    totalGoals: number;
    totalPoints: number;
  };
  goals: Goal[];
}

interface WeeklyGoal {
  id: string;
  title: string;
  description: string;
  timePerDay: string;
  points: number;
  progress: number;
  target: number;
  color: string;
  createdAt: string;
  weekNumber: number;
  isAutoGenerated?: boolean;
}

interface Challenge {
  id: string;
  title: string;
  description: string;
  difficulty: 'EASY' | 'MEDIUM' | 'HARD' | 'EXPERT';
  duration: string;
  points: number;
  progress: number;
  target: number;
  color: string;
  requirements: string[];
  rewards: string[];
  createdAt: string;
  isCustom?: boolean;
}

interface ReportCard {
  id: string;
  userId: string;
  assessorId: string;
  assessmentDate: string;
  ballHandling: number;
  ballHandlingNotes?: string;
  shooting: number;
  shootingNotes?: string;
  passing: number;
  passingNotes?: string;
  defense: number;
  defenseNotes?: string;
  rebounding: number;
  reboundingNotes?: string;
  footwork: number;
  footworkNotes?: string;
  conditioning: number;
  conditioningNotes?: string;
  teamwork: number;
  teamworkNotes?: string;
  leadership: number;
  leadershipNotes?: string;
  basketballIQ: number;
  basketballIQNotes?: string;
  effort: number;
  effortNotes?: string;
  attitude: number;
  attitudeNotes?: string;
  coachability: number;
  coachabilityNotes?: string;
  consistency: number;
  consistencyNotes?: string;
  improvement: number;
  improvementNotes?: string;
  strengths?: string;
  areasForImprovement?: string;
  specificGoals?: string;
  parentNotes?: string;
  overallRating: number;
  recommendedFocus?: string;
  nextLevelReadiness: number;
  assessor: {
    id: string;
    name: string;
    email?: string;
  };
}

// Helper function to get week number
const getWeekNumber = (date: Date): number => {
  const firstDayOfYear = new Date(date.getFullYear(), 0, 1);
  const pastDaysOfYear = (date.getTime() - firstDayOfYear.getTime()) / 86400000;
  return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);
};

// Weekly goal templates for auto-generation
const weeklyGoalTemplates = [
  {
    title: 'Perfect Your Jump Shot',
    description: 'Focus on proper shooting form and make 100 jump shots from different spots on the court.',
    timePerDay: '30 min/day',
    points: 35,
    target: 100,
    color: 'blue'
  },
  {
    title: 'Master Ball Handling',
    description: 'Practice advanced dribbling combinations and improve your weak hand control.',
    timePerDay: '25 min/day',
    points: 30,
    target: 5,
    color: 'green'
  },
  {
    title: 'Defensive Stance Challenge',
    description: 'Work on defensive positioning, footwork, and reaction time through various drills.',
    timePerDay: '35 min/day',
    points: 40,
    target: 7,
    color: 'purple'
  },
  {
    title: 'Cardio Basketball Training',
    description: 'Improve your endurance with basketball-specific conditioning exercises.',
    timePerDay: '20 min/session',
    points: 25,
    target: 4,
    color: 'red'
  },
  {
    title: 'Three-Point Shooting',
    description: 'Extend your range and consistency from beyond the arc.',
    timePerDay: '40 min/day',
    points: 45,
    target: 75,
    color: 'orange'
  },
  {
    title: 'Rebounding Fundamentals',
    description: 'Master boxing out, positioning, and securing rebounds on both ends.',
    timePerDay: '30 min/day',
    points: 35,
    target: 50,
    color: 'indigo'
  }
];

export function RewardSystem() {
  const [levels, setLevels] = useState<Level[]>([]);
  const [loading, setLoading] = useState(true);
  const [expandedLevels, setExpandedLevels] = useState<Set<string>>(new Set());
  const [expandedGoals, setExpandedGoals] = useState<Set<string>>(new Set());
  const [editingGoal, setEditingGoal] = useState<Goal | null>(null);
  const [editDialogOpen, setEditDialogOpen] = useState(false);
  const [editingWeeklyGoal, setEditingWeeklyGoal] = useState<WeeklyGoal | null>(null);
  const [weeklyGoalEditDialogOpen, setWeeklyGoalEditDialogOpen] = useState(false);
  const [editingChallenge, setEditingChallenge] = useState<Challenge | null>(null);
  const [challengeEditDialogOpen, setChallengeEditDialogOpen] = useState(false);
  const [challenges, setChallenges] = useState<Challenge[]>([
    {
      id: 'ch1',
      title: 'The Perfect Game',
      description: 'Score 20+ points with 80% field goal accuracy and 5+ assists in a single game.',
      difficulty: 'EXPERT',
      duration: '1 Game',
      points: 100,
      progress: 0,
      target: 1,
      color: 'gold',
      requirements: ['20+ points', '80% FG accuracy', '5+ assists'],
      rewards: ['Perfect Game Badge', 'Elite Player Status', '100 bonus points'],
      createdAt: new Date().toISOString(),
      isCustom: false
    },
    {
      id: 'ch2',
      title: 'Triple-Double Machine',
      description: 'Achieve a triple-double (10+ in three categories) in any game mode.',
      difficulty: 'HARD',
      duration: '1 Game',
      points: 75,
      progress: 0,
      target: 1,
      color: 'purple',
      requirements: ['10+ points', '10+ rebounds', '10+ assists'],
      rewards: ['Triple-Double Badge', 'All-Around Player Title', '75 bonus points'],
      createdAt: new Date().toISOString(),
      isCustom: false
    },
    {
      id: 'ch3',
      title: 'Sharpshooter Challenge',
      description: 'Make 10 three-pointers in a row during practice sessions.',
      difficulty: 'MEDIUM',
      duration: '1 Week',
      points: 50,
      progress: 3,
      target: 10,
      color: 'orange',
      requirements: ['Consistent shooting form', 'Mental focus', 'Proper follow-through'],
      rewards: ['Sharpshooter Badge', 'Three-Point Specialist', '50 bonus points'],
      createdAt: new Date().toISOString(),
      isCustom: false
    },
    {
      id: 'ch4',
      title: 'Defensive Lockdown',
      description: 'Get 5 steals and 3 blocks in a single game while allowing less than 40% opponent shooting.',
      difficulty: 'HARD',
      duration: '1 Game',
      points: 80,
      progress: 0,
      target: 1,
      color: 'red',
      requirements: ['5+ steals', '3+ blocks', 'Opponent <40% shooting'],
      rewards: ['Defensive Specialist Badge', 'Lockdown Defender Title', '80 bonus points'],
      createdAt: new Date().toISOString(),
      isCustom: false
    },
    {
      id: 'ch5',
      title: 'Endurance Master',
      description: 'Complete 5 full-court basketball sessions without missing a day this week.',
      difficulty: 'MEDIUM',
      duration: '1 Week',
      points: 60,
      progress: 2,
      target: 5,
      color: 'green',
      requirements: ['Daily commitment', 'Full-court sessions', 'No missed days'],
      rewards: ['Endurance Badge', 'Consistency Champion', '60 bonus points'],
      createdAt: new Date().toISOString(),
      isCustom: false
    }
  ]);
  const [weeklyGoals, setWeeklyGoals] = useState<WeeklyGoal[]>([
    {
      id: 'wg1',
      title: 'Perfect 50 Free Throws',
      description: 'Practice your free throw shooting by making 50 consecutive free throws this week. Focus on consistency and form.',
      timePerDay: '30 min/day',
      points: 25,
      progress: 32,
      target: 50,
      color: 'blue',
      createdAt: new Date().toISOString(),
      weekNumber: getWeekNumber(new Date()),
      isAutoGenerated: false
    },
    {
      id: 'wg2',
      title: 'Master 3 New Dribbling Moves',
      description: 'Learn and practice 3 new dribbling moves: crossover, behind-the-back, and between-the-legs. Master each move with both hands.',
      timePerDay: '45 min/day',
      points: 30,
      progress: 2,
      target: 3,
      color: 'green',
      createdAt: new Date().toISOString(),
      weekNumber: getWeekNumber(new Date()),
      isAutoGenerated: false
    },
    {
      id: 'wg3',
      title: 'Complete 5 Defensive Drills',
      description: 'Focus on defensive fundamentals by completing 5 different defensive drills: lateral slides, closeouts, help defense, steal drills, and rebounding.',
      timePerDay: '40 min/day',
      points: 35,
      progress: 3,
      target: 5,
      color: 'purple',
      createdAt: new Date().toISOString(),
      weekNumber: getWeekNumber(new Date()),
      isAutoGenerated: false
    },
    {
      id: 'wg4',
      title: 'Improve Shooting Range',
      description: 'Extend your shooting range by practicing shots from different distances. Make 20 shots from mid-range and 15 from three-point line daily.',
      timePerDay: '35 min/day',
      points: 40,
      progress: 4,
      target: 7,
      color: 'orange',
      createdAt: new Date().toISOString(),
      weekNumber: getWeekNumber(new Date()),
      isAutoGenerated: false
    },
    {
      id: 'wg5',
      title: 'Basketball Conditioning',
      description: 'Build your basketball endurance with conditioning drills: suicides, full-court sprints, and agility ladder work. Complete 3 sessions this week.',
      timePerDay: '25 min/session',
      points: 20,
      progress: 1,
      target: 3,
      color: 'red',
      createdAt: new Date().toISOString(),
      weekNumber: getWeekNumber(new Date()),
      isAutoGenerated: false
    }
  ]);
  
  // Report Card state
  const [reportCard, setReportCard] = useState<ReportCard | null>(null);
  const [reportCardHistory, setReportCardHistory] = useState<ReportCard[]>([]);
  const [reportCardLoading, setReportCardLoading] = useState(false);
  
  const { toast } = useToast();

  useEffect(() => {
    fetchLevels();
    fetchReportCard();
  }, []);

  const fetchReportCard = async () => {
    try {
      setReportCardLoading(true);
      const response = await fetch('/api/report-card');
      if (response.ok) {
        const data = await response.json();
        setReportCard(data.latest);
        setReportCardHistory(data.history);
      } else {
        // If no session found, use mock data for demonstration
        console.log('No session found, using mock report card data');
        setReportCard({
          id: 'mock-report-1',
          userId: 'mock-user',
          assessorId: 'mock-parent',
          assessmentDate: new Date().toISOString(),
          ballHandling: 7,
          ballHandlingNotes: 'Good control with both hands, needs to work on handling under pressure',
          shooting: 6,
          shootingNotes: 'Consistent form but needs to improve range and accuracy from 3-point line',
          passing: 8,
          passingNotes: 'Excellent court vision and decision making, great at finding open teammates',
          defense: 5,
          defenseNotes: 'Needs to work on defensive stance and staying in front of opponent',
          rebounding: 6,
          reboundingNotes: 'Good positioning but needs to be more aggressive on the boards',
          footwork: 7,
          footworkNotes: 'Solid fundamentals, continue working on pivot moves and agility',
          conditioning: 8,
          conditioningNotes: 'Excellent stamina and endurance, maintains energy throughout games',
          teamwork: 9,
          teamworkNotes: 'Outstanding team player, always supports teammates and follows game plan',
          leadership: 6,
          leadershipNotes: 'Shows potential, needs to be more vocal and take charge in pressure situations',
          basketballIQ: 7,
          basketballIQNotes: 'Good understanding of game situations, continue studying game film',
          effort: 9,
          effortNotes: 'Always gives 100% effort in practice and games, great work ethic',
          attitude: 8,
          attitudeNotes: 'Positive attitude and coachable, maintains composure under pressure',
          coachability: 9,
          coachabilityNotes: 'Excellent listener, quickly implements feedback and corrections',
          consistency: 6,
          consistencyNotes: 'Performance varies game to game, needs to maintain steady level of play',
          improvement: 8,
          improvementNotes: 'Shows significant improvement each week, continues to develop skills',
          strengths: 'Excellent teamwork and positive attitude. Shows great effort in practice and games. Natural leadership qualities are emerging.',
          areasForImprovement: 'Needs to work on defensive positioning and consistency in shooting form. Could improve rebounding technique and boxing out.',
          specificGoals: 'Focus on 100 free throws per practice session. Work on defensive slides and closeout drills. Practice proper rebounding form.',
          parentNotes: 'Has been very dedicated to practice and shows improvement each week. Enjoys the team aspect of basketball and motivates teammates.',
          overallRating: 7,
          recommendedFocus: 'Defense and Shooting Consistency',
          nextLevelReadiness: 6,
          assessor: {
            id: 'mock-parent',
            name: 'Parent/Coach',
            email: 'parent@example.com'
          }
        });
        
        setReportCardHistory([
          {
            id: 'mock-report-1',
            userId: 'mock-user',
            assessorId: 'mock-parent',
            assessmentDate: new Date().toISOString(),
            ballHandling: 7,
            ballHandlingNotes: 'Good control with both hands, needs to work on handling under pressure',
            shooting: 6,
            shootingNotes: 'Consistent form but needs to improve range and accuracy from 3-point line',
            passing: 8,
            passingNotes: 'Excellent court vision and decision making, great at finding open teammates',
            defense: 5,
            defenseNotes: 'Needs to work on defensive stance and staying in front of opponent',
            rebounding: 6,
            reboundingNotes: 'Good positioning but needs to be more aggressive on the boards',
            footwork: 7,
            footworkNotes: 'Solid fundamentals, continue working on pivot moves and agility',
            conditioning: 8,
            conditioningNotes: 'Excellent stamina and endurance, maintains energy throughout games',
            teamwork: 9,
            teamworkNotes: 'Outstanding team player, always supports teammates and follows game plan',
            leadership: 6,
            leadershipNotes: 'Shows potential, needs to be more vocal and take charge in pressure situations',
            basketballIQ: 7,
            basketballIQNotes: 'Good understanding of game situations, continue studying game film',
            effort: 9,
            effortNotes: 'Always gives 100% effort in practice and games, great work ethic',
            attitude: 8,
            attitudeNotes: 'Positive attitude and coachable, maintains composure under pressure',
            coachability: 9,
            coachabilityNotes: 'Excellent listener, quickly implements feedback and corrections',
            consistency: 6,
            consistencyNotes: 'Performance varies game to game, needs to maintain steady level of play',
            improvement: 8,
            improvementNotes: 'Shows significant improvement each week, continues to develop skills',
            overallRating: 7,
            recommendedFocus: 'Defense and Shooting Consistency',
            nextLevelReadiness: 6,
            assessor: {
              id: 'mock-parent',
              name: 'Parent/Coach'
            }
          },
          {
            id: 'mock-report-2',
            userId: 'mock-user',
            assessorId: 'mock-parent',
            assessmentDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 days ago
            ballHandling: 6,
            ballHandlingNotes: 'Improving but still struggles with weak hand dribbling',
            shooting: 5,
            shootingNotes: 'Inconsistent form, needs more practice on shooting mechanics',
            passing: 7,
            passingNotes: 'Good vision but sometimes forces passes into traffic',
            defense: 4,
            defenseNotes: 'Needs significant work on defensive fundamentals and positioning',
            rebounding: 5,
            reboundingNotes: 'Lacks aggression on rebounds, needs to work on boxing out',
            footwork: 6,
            footworkNotes: 'Basic footwork is there but needs refinement for advanced moves',
            conditioning: 7,
            conditioningNotes: 'Good endurance but could improve speed and agility',
            teamwork: 8,
            teamworkNotes: 'Great team player, always willing to help teammates',
            leadership: 5,
            leadershipNotes: 'Quiet player, needs to develop confidence to lead',
            basketballIQ: 6,
            basketballIQNotes: 'Understanding game basics but needs to learn advanced concepts',
            effort: 8,
            effortNotes: 'Consistent effort in practice, always tries hard',
            attitude: 8,
            attitudeNotes: 'Positive attitude and eager to learn',
            coachability: 9,
            coachabilityNotes: 'Very coachable, listens well and applies feedback',
            consistency: 5,
            consistencyNotes: 'Performance is inconsistent, good games followed by poor ones',
            improvement: 7,
            improvementNotes: 'Showing steady improvement over time',
            overallRating: 6,
            recommendedFocus: 'Ball Handling and Defense',
            nextLevelReadiness: 5,
            assessor: {
              id: 'mock-parent',
              name: 'Parent/Coach'
            }
          },
          {
            id: 'mock-report-3',
            userId: 'mock-user',
            assessorId: 'mock-parent',
            assessmentDate: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000).toISOString(), // 60 days ago
            ballHandling: 5,
            ballHandlingNotes: 'Basic dribbling skills, needs significant practice with both hands',
            shooting: 4,
            shootingNotes: 'Poor shooting form, needs to work on fundamentals',
            passing: 6,
            passingNotes: 'Decent passing but needs to improve accuracy and timing',
            defense: 3,
            defenseNotes: 'Defensive skills need major improvement, work on stance and positioning',
            rebounding: 4,
            reboundingNotes: 'Lacks physicality and positioning for rebounds',
            footwork: 5,
            footworkNotes: 'Basic footwork needs improvement for all basketball movements',
            conditioning: 6,
            conditioningNotes: 'Fair conditioning but needs to build more stamina',
            teamwork: 7,
            teamworkNotes: 'Good team attitude, works well with others',
            leadership: 4,
            leadershipNotes: 'Needs to build confidence and communication skills',
            basketballIQ: 5,
            basketballIQNotes: 'Learning the game, needs more experience and study',
            effort: 7,
            effortNotes: 'Good effort level, shows up ready to work',
            attitude: 7,
            attitudeNotes: 'Positive attitude, receptive to coaching',
            coachability: 8,
            coachabilityNotes: 'Excellent at listening and trying to implement feedback',
            consistency: 4,
            consistencyNotes: 'Very inconsistent performance, needs to develop routine',
            improvement: 6,
            improvementNotes: 'Making progress but needs more focused practice',
            overallRating: 5,
            recommendedFocus: 'Fundamentals and Conditioning',
            nextLevelReadiness: 4,
            assessor: {
              id: 'mock-parent',
              name: 'Parent/Coach'
            }
          }
        ]);
      }
    } catch (error) {
      console.error('Error fetching report card:', error);
      // Fallback to mock data on error
      setReportCard(null);
      setReportCardHistory([]);
    } finally {
      setReportCardLoading(false);
    }
  };

  // Auto-generate weekly goals
  useEffect(() => {
    const checkAndGenerateWeeklyGoals = () => {
      const currentWeek = getWeekNumber(new Date());
      const hasCurrentWeekGoal = weeklyGoals.some(goal => goal.weekNumber === currentWeek);
      
      if (!hasCurrentWeekGoal) {
        generateWeeklyGoal(currentWeek);
      }
    };

    // Check immediately
    checkAndGenerateWeeklyGoals();
    
    // Set up interval to check daily (24 hours)
    const interval = setInterval(checkAndGenerateWeeklyGoals, 24 * 60 * 60 * 1000);
    
    return () => clearInterval(interval);
  }, [weeklyGoals]);

  const generateWeeklyGoal = (weekNumber: number) => {
    // Get a random template that hasn't been used recently
    const usedTemplates = weeklyGoals
      .filter(goal => goal.isAutoGenerated)
      .map(goal => goal.title);
    
    const availableTemplates = weeklyGoalTemplates.filter(
      template => !usedTemplates.includes(template.title)
    );
    
    // If all templates have been used, reset and use any template
    const templatePool = availableTemplates.length > 0 ? availableTemplates : weeklyGoalTemplates;
    const randomTemplate = templatePool[Math.floor(Math.random() * templatePool.length)];
    
    const newWeeklyGoal: WeeklyGoal = {
      id: `wg-auto-${Date.now()}`,
      title: randomTemplate.title,
      description: randomTemplate.description,
      timePerDay: randomTemplate.timePerDay,
      points: randomTemplate.points,
      progress: 0,
      target: randomTemplate.target,
      color: randomTemplate.color,
      createdAt: new Date().toISOString(),
      weekNumber: weekNumber,
      isAutoGenerated: true
    };

    setWeeklyGoals(prev => [...prev, newWeeklyGoal]);
    
    toast({
      title: "New Weekly Goal!",
      description: `A new weekly goal "${randomTemplate.title}" has been added for this week.`,
    });
  };

  const fetchLevels = async () => {
    try {
      const response = await fetch('/api/levels');
      const data = await response.json();
      setLevels(data);
    } catch (error) {
      console.error('Error fetching levels:', error);
      toast({
        title: "Error",
        description: "Failed to load levels",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const toggleLevel = (levelId: string) => {
    const newExpanded = new Set(expandedLevels);
    if (newExpanded.has(levelId)) {
      newExpanded.delete(levelId);
    } else {
      newExpanded.add(levelId);
    }
    setExpandedLevels(newExpanded);
  };

  const toggleGoal = (goalId: string) => {
    const newExpanded = new Set(expandedGoals);
    if (newExpanded.has(goalId)) {
      newExpanded.delete(goalId);
    } else {
      newExpanded.add(goalId);
    }
    setExpandedGoals(newExpanded);
  };

  const handleEditGoal = (goal: Goal) => {
    setEditingGoal(goal);
    setEditDialogOpen(true);
  };

  const handleSaveGoal = async (goalData: Partial<Goal>) => {
    try {
      const response = await fetch('/api/levels', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(goalData),
      });

      if (response.ok) {
        toast({
          title: "Success",
          description: "Goal updated successfully",
        });
        fetchLevels(); // Refresh data
      } else {
        throw new Error('Failed to update goal');
      }
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to update goal",
        variant: "destructive",
      });
    }
    setEditDialogOpen(false);
    setEditingGoal(null);
  };

  const handleSaveWeeklyGoal = async (goalData: Partial<WeeklyGoal>) => {
    try {
      // Check if this is a new goal or updating existing one
      const existingGoal = weeklyGoals.find(goal => goal.id === goalData.id);
      
      if (existingGoal) {
        // Update existing goal
        setWeeklyGoals(prev => prev.map(goal => 
          goal.id === goalData.id ? { ...goal, ...goalData } : goal
        ));
        toast({
          title: "Success",
          description: "Weekly goal updated successfully",
        });
      } else {
        // Add new goal
        const newGoal: WeeklyGoal = {
          id: goalData.id || `wg-${Date.now()}`,
          title: goalData.title || '',
          description: goalData.description || '',
          timePerDay: goalData.timePerDay || '',
          points: goalData.points || 0,
          progress: goalData.progress || 0,
          target: goalData.target || 1,
          color: goalData.color || 'blue',
          createdAt: new Date().toISOString(),
          weekNumber: getWeekNumber(new Date()),
          isAutoGenerated: false
        };
        setWeeklyGoals(prev => [...prev, newGoal]);
        toast({
          title: "Success",
          description: "New weekly goal added successfully",
        });
      }
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to save weekly goal",
        variant: "destructive",
      });
    }
    setWeeklyGoalEditDialogOpen(false);
    setEditingWeeklyGoal(null);
  };

  const handleDeleteWeeklyGoal = (goalId: string) => {
    setWeeklyGoals(prev => prev.filter(goal => goal.id !== goalId));
    toast({
      title: "Success",
      description: "Weekly goal deleted successfully",
    });
  };

  const handleSaveChallenge = async (challengeData: Partial<Challenge>) => {
    try {
      // Check if this is a new challenge or updating existing one
      const existingChallenge = challenges.find(challenge => challenge.id === challengeData.id);
      
      if (existingChallenge) {
        // Update existing challenge
        setChallenges(prev => prev.map(challenge => 
          challenge.id === challengeData.id ? { ...challenge, ...challengeData } : challenge
        ));
        toast({
          title: "Success",
          description: "Challenge updated successfully",
        });
      } else {
        // Add new challenge
        const newChallenge: Challenge = {
          id: challengeData.id || `ch-${Date.now()}`,
          title: challengeData.title || '',
          description: challengeData.description || '',
          difficulty: challengeData.difficulty || 'MEDIUM',
          duration: challengeData.duration || '1 Week',
          points: challengeData.points || 0,
          progress: challengeData.progress || 0,
          target: challengeData.target || 1,
          color: challengeData.color || 'blue',
          requirements: challengeData.requirements || [],
          rewards: challengeData.rewards || [],
          createdAt: new Date().toISOString(),
          isCustom: true
        };
        setChallenges(prev => [...prev, newChallenge]);
        toast({
          title: "Success",
          description: "New challenge added successfully",
        });
      }
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to save challenge",
        variant: "destructive",
      });
    }
    setChallengeEditDialogOpen(false);
    setEditingChallenge(null);
  };

  const handleDeleteChallenge = (challengeId: string) => {
    setChallenges(prev => prev.filter(challenge => challenge.id !== challengeId));
    toast({
      title: "Success",
      description: "Challenge deleted successfully",
    });
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'BEGINNER': return 'bg-green-100 text-green-800';
      case 'INTERMEDIATE': return 'bg-yellow-100 text-yellow-800';
      case 'ADVANCED': return 'bg-orange-100 text-orange-800';
      case 'EXPERT': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'COMPLETED': return 'bg-green-100 text-green-800';
      case 'IN_PROGRESS': return 'bg-blue-100 text-blue-800';
      case 'AVAILABLE': return 'bg-yellow-100 text-yellow-800';
      case 'LOCKED': return 'bg-gray-100 text-gray-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  if (loading) {
    return (
      <div className="space-y-4">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-1/4 mb-4"></div>
          <div className="space-y-3">
            {[1, 2, 3].map((i) => (
              <div key={i} className="h-24 bg-gray-200 rounded"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="text-center">
        <h2 className="text-3xl font-bold mb-2">Basketball Mastery Journey</h2>
        <p className="text-gray-600">Progress through 10 levels with 100 detailed goals</p>
      </div>

      <Tabs defaultValue="levels" className="w-full">
        <TabsList className="grid w-full grid-cols-5">
          <TabsTrigger value="levels" className="flex items-center gap-2">
            <Trophy className="h-4 w-4" />
            Levels
          </TabsTrigger>
          <TabsTrigger value="weekly-goals" className="flex items-center gap-2">
            <Calendar className="h-4 w-4" />
            Weekly Goals
          </TabsTrigger>
          <TabsTrigger value="challenges" className="flex items-center gap-2">
            <Target className="h-4 w-4" />
            Challenges
          </TabsTrigger>
          <TabsTrigger value="achievements" className="flex items-center gap-2">
            <Award className="h-4 w-4" />
            Achievements
          </TabsTrigger>
          <TabsTrigger value="report-card" className="flex items-center gap-2">
            <BookOpen className="h-4 w-4" />
            Report Card
          </TabsTrigger>
        </TabsList>

        <TabsContent value="levels" className="space-y-4">
        {levels.map((level) => (
          <Card key={level.id} className="overflow-hidden">
            <Collapsible>
              <CollapsibleTrigger asChild>
                <CardHeader 
                  className="cursor-pointer hover:bg-gray-50 transition-colors"
                  onClick={() => toggleLevel(level.id)}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-4">
                      <div className="text-3xl">{level.badgeIcon}</div>
                      <div>
                        <CardTitle className="flex items-center gap-2">
                          Level {level.levelNumber}: {level.name}
                          <Badge 
                            variant="outline" 
                            className={getStatusColor(level.userProgress.status)}
                          >
                            {level.userProgress.status.replace('_', ' ')}
                          </Badge>
                        </CardTitle>
                        <p className="text-sm text-gray-600 mt-1">{level.description}</p>
                      </div>
                    </div>
                    <div className="flex items-center space-x-4">
                      <div className="text-right">
                        <div className="text-sm font-medium">
                          {level.userProgress.completedGoals}/{level.userProgress.totalGoals} Goals
                        </div>
                        <div className="text-xs text-gray-500">
                          {level.pointsRequired} points required
                        </div>
                      </div>
                      {expandedLevels.has(level.id) ? (
                        <ChevronUp className="h-5 w-5" />
                      ) : (
                        <ChevronDown className="h-5 w-5" />
                      )}
                    </div>
                  </div>
                  
                  <div className="mt-4">
                    <div className="flex justify-between text-sm mb-1">
                      <span>Progress</span>
                      <span>{level.userProgress.progress}%</span>
                    </div>
                    <Progress value={level.userProgress.progress} className="h-2" />
                  </div>
                </CardHeader>
              </CollapsibleTrigger>

              <CollapsibleContent>
                <CardContent className="pt-0">
                  <div className="mb-4">
                    <h4 className="font-semibold mb-2">Level Rewards:</h4>
                    <div className="flex flex-wrap gap-2">
                      {level.rewards.map((reward, index) => (
                        <Badge key={index} variant="secondary">
                          {reward}
                        </Badge>
                      ))}
                    </div>
                  </div>

                  <div className="space-y-3">
                    <h4 className="font-semibold">Goals ({level.goals.length}):</h4>
                    {level.goals.map((goal) => (
                      <Card key={goal.id} className="border-l-4" style={{ borderLeftColor: level.badgeColor }}>
                        <Collapsible>
                          <CollapsibleTrigger asChild>
                            <CardHeader 
                              className="cursor-pointer hover:bg-gray-50 transition-colors py-3"
                              onClick={() => toggleGoal(goal.id)}
                            >
                              <div className="flex items-center justify-between">
                                <div className="flex items-center space-x-3">
                                  <Trophy className="h-4 w-4 text-yellow-500" />
                                  <div>
                                    <div className="font-medium">{goal.name}</div>
                                    <div className="text-sm text-gray-600">{goal.description}</div>
                                  </div>
                                </div>
                                <div className="flex items-center space-x-2">
                                  <Badge className={getDifficultyColor(goal.difficulty)}>
                                    {goal.difficulty}
                                  </Badge>
                                  <Badge variant="outline">
                                    {goal.points} pts
                                  </Badge>
                                  <Button
                                    variant="ghost"
                                    size="sm"
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      handleEditGoal(goal);
                                    }}
                                  >
                                    <Edit className="h-4 w-4" />
                                  </Button>
                                  {expandedGoals.has(goal.id) ? (
                                    <ChevronUp className="h-4 w-4" />
                                  ) : (
                                    <ChevronDown className="h-4 w-4" />
                                  )}
                                </div>
                              </div>
                            </CardHeader>
                          </CollapsibleTrigger>

                          <CollapsibleContent>
                            <CardContent className="pt-0">
                              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div className="space-y-4">
                                  <div>
                                    <h5 className="font-semibold flex items-center gap-2 mb-2">
                                      <Target className="h-4 w-4" />
                                      Goal Details
                                    </h5>
                                    <p className="text-sm text-gray-700">{goal.detailedDescription}</p>
                                  </div>

                                  <div>
                                    <h5 className="font-semibold flex items-center gap-2 mb-2">
                                      <BookOpen className="h-4 w-4" />
                                      Instructions
                                    </h5>
                                    <ol className="text-sm text-gray-700 space-y-1">
                                      {goal.instructions.map((instruction, index) => (
                                        <li key={index} className="flex items-start gap-2">
                                          <span className="font-medium text-blue-600 min-w-[20px]">
                                            {index + 1}.
                                          </span>
                                          {instruction}
                                        </li>
                                      ))}
                                    </ol>
                                  </div>

                                  <div>
                                    <h5 className="font-semibold flex items-center gap-2 mb-2">
                                      <Lightbulb className="h-4 w-4" />
                                      Tips
                                    </h5>
                                    <ul className="text-sm text-gray-700 space-y-1">
                                      {goal.tips.map((tip, index) => (
                                        <li key={index} className="flex items-start gap-2">
                                          <span className="text-green-600 min-w-[8px]">•</span>
                                          {tip}
                                        </li>
                                      ))}
                                    </ul>
                                  </div>
                                </div>

                                <div className="space-y-4">
                                  <div>
                                    <h5 className="font-semibold flex items-center gap-2 mb-2">
                                      <AlertTriangle className="h-4 w-4" />
                                      Common Mistakes
                                    </h5>
                                    <ul className="text-sm text-gray-700 space-y-1">
                                      {goal.commonMistakes.map((mistake, index) => (
                                        <li key={index} className="flex items-start gap-2">
                                          <span className="text-red-600 min-w-[8px]">•</span>
                                          {mistake}
                                        </li>
                                      ))}
                                    </ul>
                                  </div>

                                  <div>
                                    <h5 className="font-semibold flex items-center gap-2 mb-2">
                                      <Play className="h-4 w-4" />
                                      Related Drills
                                    </h5>
                                    <div className="flex flex-wrap gap-1">
                                      {goal.relatedDrills.map((drill, index) => (
                                        <Badge key={index} variant="outline" className="text-xs">
                                          {drill}
                                        </Badge>
                                      ))}
                                    </div>
                                  </div>

                                  <div>
                                    <h5 className="font-semibold flex items-center gap-2 mb-2">
                                      <Video className="h-4 w-4" />
                                      Video References
                                    </h5>
                                    <div className="flex flex-wrap gap-1">
                                      {goal.videoReferences.map((video, index) => (
                                        <Badge key={index} variant="outline" className="text-xs">
                                          {video}
                                        </Badge>
                                      ))}
                                    </div>
                                  </div>

                                  <div className="grid grid-cols-2 gap-4 pt-2 border-t">
                                    <div className="text-center">
                                      <div className="text-sm text-gray-500">Target</div>
                                      <div className="font-semibold">
                                        {goal.targetValue} {goal.targetUnit}
                                      </div>
                                    </div>
                                    <div className="text-center">
                                      <div className="text-sm text-gray-500">Est. Time</div>
                                      <div className="font-semibold flex items-center justify-center gap-1">
                                        <Clock className="h-3 w-3" />
                                        {goal.estimatedTime}min
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>

                              {(goal.personalNotes || goal.customCriteria) && (
                                <div className="mt-4 p-3 bg-blue-50 rounded-lg">
                                  <h5 className="font-semibold flex items-center gap-2 mb-2">
                                    <User className="h-4 w-4" />
                                    Personal Notes
                                  </h5>
                                  {goal.personalNotes && (
                                    <p className="text-sm text-gray-700 mb-2">{goal.personalNotes}</p>
                                  )}
                                  {goal.customCriteria && (
                                    <p className="text-sm text-gray-700">
                                      <span className="font-medium">Custom Criteria:</span> {goal.customCriteria}
                                    </p>
                                  )}
                                </div>
                              )}
                            </CardContent>
                          </CollapsibleContent>
                        </Collapsible>
                      </Card>
                    ))}
                  </div>
                </CardContent>
              </CollapsibleContent>
            </Collapsible>
          </Card>
        ))}
        </TabsContent>

        <TabsContent value="weekly-goals" className="space-y-4">
          <div className="mb-6 flex items-center justify-between">
            <div>
              <h3 className="text-xl font-semibold mb-2">This Week's Basketball Goals</h3>
              <p className="text-gray-600">Complete these weekly goals to improve your game and earn bonus points!</p>
              <div className="mt-2 text-sm text-gray-500">
                Week {getWeekNumber(new Date())} of {new Date().getFullYear()} • {weeklyGoals.length} goals active
              </div>
            </div>
            <div className="flex gap-2">
              <Button
                onClick={() => {
                  setEditingWeeklyGoal({
                    id: `wg-${Date.now()}`,
                    title: '',
                    description: '',
                    timePerDay: '',
                    points: 0,
                    progress: 0,
                    target: 1,
                    color: 'blue',
                    createdAt: new Date().toISOString(),
                    weekNumber: getWeekNumber(new Date()),
                    isAutoGenerated: false
                  });
                  setWeeklyGoalEditDialogOpen(true);
                }}
                className="flex items-center gap-2"
              >
                <Plus className="h-4 w-4" />
                Add Custom Goal
              </Button>
              <Button
                onClick={() => generateWeeklyGoal(getWeekNumber(new Date()))}
                variant="outline"
                className="flex items-center gap-2"
              >
                <Target className="h-4 w-4" />
                Generate Weekly Goal
              </Button>
            </div>
          </div>
          
          <div className="grid gap-4">
            {weeklyGoals.map((goal) => (
              <Card key={goal.id} className="border-l-4" style={{ borderLeftColor: goal.color }}>
                <Collapsible>
                  <CollapsibleTrigger asChild>
                    <CardHeader 
                      className="cursor-pointer hover:bg-gray-50 transition-colors py-3"
                      onClick={() => {
                        setEditingWeeklyGoal(goal);
                        setWeeklyGoalEditDialogOpen(true);
                      }}
                    >
                      <div className="flex items-center justify-between">
                                                 <div className="flex items-center space-x-3">
                           <Trophy className="h-4 w-4 text-yellow-500" />
                           <div>
                             <div className="flex items-center gap-2">
                               <span className="font-medium">{goal.title}</span>
                               {goal.isAutoGenerated && (
                                 <Badge variant="secondary" className="text-xs">
                                   Auto-Generated
                                 </Badge>
                               )}
                             </div>
                             <div className="text-sm text-gray-600">{goal.description}</div>
                           </div>
                         </div>
                                                 <div className="flex items-center space-x-2">
                           <Badge variant="outline">
                             {goal.points} pts
                           </Badge>
                           <Button
                             variant="ghost"
                             size="sm"
                             onClick={(e) => {
                               e.stopPropagation();
                               setEditingWeeklyGoal(goal);
                               setWeeklyGoalEditDialogOpen(true);
                             }}
                           >
                             <Edit className="h-4 w-4" />
                           </Button>
                           <Button
                             variant="ghost"
                             size="sm"
                             onClick={(e) => {
                               e.stopPropagation();
                               handleDeleteWeeklyGoal(goal.id);
                             }}
                             className="text-red-500 hover:text-red-700"
                           >
                             <Trash2 className="h-4 w-4" />
                           </Button>
                         </div>
                      </div>
                    </CardHeader>
                  </CollapsibleTrigger>

                  <CollapsibleContent>
                    <CardContent className="pt-0">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div className="space-y-4">
                          <div>
                            <h5 className="font-semibold flex items-center gap-2 mb-2">
                              <Target className="h-4 w-4" />
                              Goal Details
                            </h5>
                            <p className="text-sm text-gray-700">{goal.description}</p>
                          </div>

                          <div>
                            <h5 className="font-semibold flex items-center gap-2 mb-2">
                              <Clock className="h-4 w-4" />
                              Time Per Day
                            </h5>
                            <p className="text-sm text-gray-700">{goal.timePerDay}</p>
                          </div>

                          <div>
                            <h5 className="font-semibold flex items-center gap-2 mb-2">
                              <Trophy className="h-4 w-4" />
                              Points
                            </h5>
                            <p className="text-sm text-gray-700">{goal.points}</p>
                          </div>
                        </div>

                        <div className="space-y-4">
                          <div>
                            <h5 className="font-semibold flex items-center gap-2 mb-2">
                              <Progress className="h-4 w-4" />
                              Progress
                            </h5>
                            <div className="flex justify-between text-sm mb-1">
                              <span>Current</span>
                              <span>{goal.progress}/{goal.target}</span>
                            </div>
                                                         <Progress value={(goal.progress / goal.target) * 100} className="h-2" />
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </CollapsibleContent>
                </Collapsible>
              </Card>
            ))}
          </div>

          <Card className="mt-6 bg-gradient-to-r from-blue-50 to-purple-50 border-blue-200">
            <CardContent className="pt-6">
              <div className="flex items-center justify-between">
                <div>
                  <h4 className="font-semibold text-lg mb-1">Weekly Progress Summary</h4>
                  <p className="text-gray-600">Complete all 5 goals to earn bonus rewards!</p>
                </div>
                <div className="text-right">
                  <div className="text-2xl font-bold text-blue-600">3/5</div>
                  <div className="text-sm text-gray-500">Goals Completed</div>
                </div>
              </div>
              <div className="mt-4">
                <div className="flex justify-between text-sm mb-1">
                  <span>Weekly Progress</span>
                  <span>60%</span>
                </div>
                <Progress value={60} className="h-3" />
              </div>
              <div className="mt-4 flex items-center gap-2 text-sm text-gray-600">
                <Trophy className="h-4 w-4 text-yellow-500" />
                <span>Total Weekly Points: 150 | Bonus for completion: +50 points</span>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="challenges" className="space-y-4">
          <div className="mb-6 flex items-center justify-between">
            <div>
              <h3 className="text-xl font-semibold mb-2">Basketball Challenges</h3>
              <p className="text-gray-600">Take on exciting challenges to earn special rewards and badges!</p>
              <div className="mt-2 text-sm text-gray-500">
                {challenges.length} challenges available • Test your skills!
              </div>
            </div>
            <Button
              onClick={() => {
                setEditingChallenge({
                  id: `ch-${Date.now()}`,
                  title: '',
                  description: '',
                  difficulty: 'MEDIUM',
                  duration: '1 Week',
                  points: 0,
                  progress: 0,
                  target: 1,
                  color: 'blue',
                  requirements: [],
                  rewards: [],
                  createdAt: new Date().toISOString(),
                  isCustom: true
                });
                setChallengeEditDialogOpen(true);
              }}
              className="flex items-center gap-2"
            >
              <Plus className="h-4 w-4" />
              Add Custom Challenge
            </Button>
          </div>
          
          <div className="grid gap-4">
            {challenges.map((challenge) => (
              <Card key={challenge.id} className="border-l-4" style={{ borderLeftColor: challenge.color }}>
                <CardHeader className="pb-3">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <Award className="h-5 w-5 text-yellow-500" />
                      <div>
                        <div className="flex items-center gap-2">
                          <span className="font-medium">{challenge.title}</span>
                          {challenge.isCustom && (
                            <Badge variant="secondary" className="text-xs">
                              Custom
                            </Badge>
                          )}
                          <Badge 
                            variant="outline" 
                            className={`text-xs ${getDifficultyColor(challenge.difficulty)}`}
                          >
                            {challenge.difficulty}
                          </Badge>
                        </div>
                        <div className="text-sm text-gray-600 mt-1">{challenge.description}</div>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Badge variant="outline" className="bg-yellow-50 text-yellow-700">
                        {challenge.points} pts
                      </Badge>
                      <Badge variant="outline" className="bg-blue-50 text-blue-700">
                        {challenge.duration}
                      </Badge>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => {
                          setEditingChallenge(challenge);
                          setChallengeEditDialogOpen(true);
                        }}
                      >
                        <Edit className="h-4 w-4" />
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleDeleteChallenge(challenge.id)}
                        className="text-red-500 hover:text-red-700"
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div className="space-y-4">
                      <div>
                        <h5 className="font-semibold flex items-center gap-2 mb-2">
                          <Target className="h-4 w-4" />
                          Requirements
                        </h5>
                        <ul className="text-sm text-gray-700 space-y-1">
                          {challenge.requirements.map((req, index) => (
                            <li key={index} className="flex items-start gap-2">
                              <span className="text-blue-600 min-w-[8px]">•</span>
                              {req}
                            </li>
                          ))}
                        </ul>
                      </div>
                    </div>

                    <div className="space-y-4">
                      <div>
                        <h5 className="font-semibold flex items-center gap-2 mb-2">
                          <Trophy className="h-4 w-4" />
                          Rewards
                        </h5>
                        <div className="flex flex-wrap gap-1">
                          {challenge.rewards.map((reward, index) => (
                            <Badge key={index} variant="outline" className="text-xs bg-green-50 text-green-700">
                              {reward}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    </div>

                    <div className="space-y-4">
                      <div>
                        <h5 className="font-semibold flex items-center gap-2 mb-2">
                          <Clock className="h-4 w-4" />
                          Progress
                        </h5>
                        <div className="flex justify-between text-sm mb-1">
                          <span>Current</span>
                          <span>{challenge.progress}/{challenge.target}</span>
                        </div>
                        <Progress value={(challenge.progress / challenge.target) * 100} className="h-2" />
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="achievements" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Award className="h-5 w-5" />
                Achievements
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-center py-8">
                <Award className="h-12 w-12 mx-auto text-gray-400 mb-4" />
                <p className="text-gray-500">Achievements feature coming soon!</p>
                <p className="text-sm text-gray-400 mt-2">
                  Unlock special achievements for your basketball milestones
                </p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="report-card" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <BookOpen className="h-5 w-5" />
                Basketball Report Card
              </CardTitle>
            </CardHeader>
            <CardContent>
              {reportCardLoading ? (
                <div className="text-center py-8">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-orange-600 mx-auto"></div>
                  <p className="text-gray-500 mt-2">Loading report card...</p>
                </div>
              ) : reportCard ? (
                <div className="space-y-6">
                  {/* Header with Assessment Info */}
                  <div className="bg-gradient-to-r from-orange-50 to-red-50 rounded-lg p-4">
                    <div className="flex items-center justify-between">
                      <div>
                        <h3 className="text-lg font-semibold">Latest Assessment</h3>
                        <p className="text-sm text-gray-600">
                          Assessed by {reportCard.assessor.name} on {new Date(reportCard.assessmentDate).toLocaleDateString()}
                        </p>
                      </div>
                      <div className="text-right">
                        <div className="text-2xl font-bold text-orange-600">{reportCard.overallRating}/10</div>
                        <p className="text-sm text-gray-600">Overall Rating</p>
                      </div>
                    </div>
                  </div>

                  {/* Skills Grid */}
                  <div>
                    <h4 className="text-lg font-semibold mb-4 flex items-center gap-2">
                      <BarChart3 className="h-5 w-5" />
                      Basketball Skills Assessment
                    </h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {[
                        { key: 'ballHandling', label: 'Ball Handling', value: reportCard.ballHandling, notes: reportCard.ballHandlingNotes },
                        { key: 'shooting', label: 'Shooting', value: reportCard.shooting, notes: reportCard.shootingNotes },
                        { key: 'passing', label: 'Passing', value: reportCard.passing, notes: reportCard.passingNotes },
                        { key: 'defense', label: 'Defense', value: reportCard.defense, notes: reportCard.defenseNotes },
                        { key: 'rebounding', label: 'Rebounding', value: reportCard.rebounding, notes: reportCard.reboundingNotes },
                        { key: 'footwork', label: 'Footwork', value: reportCard.footwork, notes: reportCard.footworkNotes },
                        { key: 'conditioning', label: 'Conditioning', value: reportCard.conditioning, notes: reportCard.conditioningNotes },
                        { key: 'teamwork', label: 'Teamwork', value: reportCard.teamwork, notes: reportCard.teamworkNotes },
                        { key: 'leadership', label: 'Leadership', value: reportCard.leadership, notes: reportCard.leadershipNotes },
                        { key: 'basketballIQ', label: 'Basketball IQ', value: reportCard.basketballIQ, notes: reportCard.basketballIQNotes },
                      ].map((skill) => (
                        <div key={skill.key} className="bg-white border rounded-lg p-4">
                          <div className="flex items-center justify-between mb-2">
                            <span className="text-sm font-medium">{skill.label}</span>
                            <span className="text-lg font-bold text-orange-600">{skill.value}/10</span>
                          </div>
                          <Progress value={skill.value * 10} className="h-2 mb-3" />
                          {skill.notes && (
                            <div className="mt-2 p-2 bg-gray-50 rounded-md">
                              <div className="flex items-start gap-2">
                                <MessageSquare className="h-4 w-4 text-gray-500 mt-0.5 flex-shrink-0" />
                                <p className="text-xs text-gray-700 leading-relaxed">{skill.notes}</p>
                              </div>
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Personal Attributes */}
                  <div>
                    <h4 className="text-lg font-semibold mb-4 flex items-center gap-2">
                      <Star className="h-5 w-5" />
                      Personal Attributes
                    </h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {[
                        { key: 'effort', label: 'Effort', value: reportCard.effort, notes: reportCard.effortNotes },
                        { key: 'attitude', label: 'Attitude', value: reportCard.attitude, notes: reportCard.attitudeNotes },
                        { key: 'coachability', label: 'Coachability', value: reportCard.coachability, notes: reportCard.coachabilityNotes },
                        { key: 'consistency', label: 'Consistency', value: reportCard.consistency, notes: reportCard.consistencyNotes },
                        { key: 'improvement', label: 'Improvement', value: reportCard.improvement, notes: reportCard.improvementNotes },
                      ].map((attribute) => (
                        <div key={attribute.key} className="bg-white border rounded-lg p-4">
                          <div className="flex items-center justify-between mb-2">
                            <span className="text-sm font-medium">{attribute.label}</span>
                            <span className="text-lg font-bold text-blue-600">{attribute.value}/10</span>
                          </div>
                          <Progress value={attribute.value * 10} className="h-2 mb-3" />
                          {attribute.notes && (
                            <div className="mt-2 p-2 bg-gray-50 rounded-md">
                              <div className="flex items-start gap-2">
                                <MessageSquare className="h-4 w-4 text-gray-500 mt-0.5 flex-shrink-0" />
                                <p className="text-xs text-gray-700 leading-relaxed">{attribute.notes}</p>
                              </div>
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Written Feedback */}
                  {(reportCard.strengths || reportCard.areasForImprovement || reportCard.specificGoals || reportCard.parentNotes) && (
                    <div>
                      <h4 className="text-lg font-semibold mb-4 flex items-center gap-2">
                        <MessageSquare className="h-5 w-5" />
                        Written Feedback
                      </h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        {reportCard.strengths && (
                          <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                            <h5 className="font-medium text-green-800 mb-2">Strengths</h5>
                            <p className="text-sm text-green-700">{reportCard.strengths}</p>
                          </div>
                        )}
                        {reportCard.areasForImprovement && (
                          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                            <h5 className="font-medium text-yellow-800 mb-2">Areas for Improvement</h5>
                            <p className="text-sm text-yellow-700">{reportCard.areasForImprovement}</p>
                          </div>
                        )}
                        {reportCard.specificGoals && (
                          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                            <h5 className="font-medium text-blue-800 mb-2">Specific Goals</h5>
                            <p className="text-sm text-blue-700">{reportCard.specificGoals}</p>
                          </div>
                        )}
                        {reportCard.parentNotes && (
                          <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
                            <h5 className="font-medium text-purple-800 mb-2">Parent Notes</h5>
                            <p className="text-sm text-purple-700">{reportCard.parentNotes}</p>
                          </div>
                        )}
                      </div>
                    </div>
                  )}

                  {/* Overall Assessment */}
                  <div className="bg-gray-50 rounded-lg p-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <h5 className="font-medium text-gray-800 mb-2">Next Level Readiness</h5>
                        <div className="flex items-center gap-2">
                          <Progress value={reportCard.nextLevelReadiness * 10} className="flex-1 h-3" />
                          <span className="text-sm font-medium">{reportCard.nextLevelReadiness}/10</span>
                        </div>
                      </div>
                      {reportCard.recommendedFocus && (
                        <div>
                          <h5 className="font-medium text-gray-800 mb-2">Recommended Focus</h5>
                          <p className="text-sm text-gray-600">{reportCard.recommendedFocus}</p>
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Progress History */}
                  {reportCardHistory.length > 1 && (
                    <div>
                      <h4 className="text-lg font-semibold mb-4 flex items-center gap-2">
                        <TrendingUp className="h-5 w-5" />
                        Progress History
                      </h4>
                      <div className="space-y-3">
                        {reportCardHistory.slice(0, 5).map((card, index) => (
                          <div key={card.id} className="flex items-center justify-between p-3 bg-white border rounded-lg">
                            <div>
                              <p className="text-sm font-medium">
                                Assessment by {card.assessor.name}
                              </p>
                              <p className="text-xs text-gray-500">
                                {new Date(card.assessmentDate).toLocaleDateString()}
                              </p>
                            </div>
                            <div className="text-right">
                              <div className="text-lg font-bold text-orange-600">{card.overallRating}/10</div>
                              <p className="text-xs text-gray-500">Overall</p>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              ) : (
                <div className="text-center py-8">
                  <BookOpen className="h-12 w-12 mx-auto text-gray-400 mb-4" />
                  <p className="text-gray-500">No report card available yet</p>
                  <p className="text-sm text-gray-400 mt-2">
                    Your parent or coach will fill out your first basketball report card
                  </p>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      <GoalEditDialog
        goal={editingGoal}
        open={editDialogOpen}
        onOpenChange={setEditDialogOpen}
        onSave={handleSaveGoal}
      />

      {/* Weekly Goal Edit Dialog */}
      <WeeklyGoalEditDialog
        goal={editingWeeklyGoal}
        open={weeklyGoalEditDialogOpen}
        onOpenChange={setWeeklyGoalEditDialogOpen}
        onSave={handleSaveWeeklyGoal}
      />

      {/* Challenge Edit Dialog */}
      <ChallengeEditDialog
        challenge={editingChallenge}
        open={challengeEditDialogOpen}
        onOpenChange={setChallengeEditDialogOpen}
        onSave={handleSaveChallenge}
      />
    </div>
  );
} 