"use strict";(()=>{var e={};e.id=769,e.ids=[769],e.modules={72934:e=>{e.exports=require("next/dist/client/components/action-async-storage.external.js")},54580:e=>{e.exports=require("next/dist/client/components/request-async-storage.external.js")},45869:e=>{e.exports=require("next/dist/client/components/static-generation-async-storage.external.js")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},27790:e=>{e.exports=require("assert")},78893:e=>{e.exports=require("buffer")},84770:e=>{e.exports=require("crypto")},17702:e=>{e.exports=require("events")},32615:e=>{e.exports=require("http")},35240:e=>{e.exports=require("https")},86624:e=>{e.exports=require("querystring")},17360:e=>{e.exports=require("url")},21764:e=>{e.exports=require("util")},71568:e=>{e.exports=require("zlib")},91573:(e,r,t)=>{t.r(r),t.d(r,{originalPathname:()=>g,patchFetch:()=>v,requestAsyncStorage:()=>y,routeModule:()=>h,serverHooks:()=>w,staticGenerationAsyncStorage:()=>f});var i={};t.r(i),t.d(i,{POST:()=>p,dynamic:()=>u});var n=t(79182),a=t(72007),o=t(56719),s=t(93442),l=t(15649),d=t(35970),c=t(40311);let u="force-dynamic";async function p(e){let r=await (0,l.getServerSession)(c.L);if(!r?.user?.id)return s.NextResponse.json({error:"Unauthorized"},{status:401});let{preferences:t}=await e.json(),i=r.user.id;try{let e=await d._.playerProfile.findUnique({where:{userId:i}}),r=await d._.drillCompletion.findMany({where:{userId:i},include:{drill:!0},orderBy:{completedAt:"desc"},take:10}),n=await d._.drill.findMany(),a={skillLevel:e?.skillLevel||"beginner",favoritePosition:e?.favoritePosition,totalPoints:e?.totalPoints||0,currentStreak:e?.currentStreak||0,recentDrills:r.map(e=>({name:e.drill.name,category:e.drill.category,rating:e.rating,completedAt:e.completedAt})),preferences:t||{},availableDrills:n.map(e=>({id:e.id,name:e.name,category:e.category,skillLevel:e.skillLevel,description:e.description}))},o=await fetch("https://apps.abacus.ai/v1/chat/completions",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${process.env.ABACUSAI_API_KEY}`},body:JSON.stringify({model:"gpt-4.1-mini",messages:[{role:"system",content:`You are a basketball coach AI that recommends drills based on player data. 
            
            Analyze the player's profile and recent activity to recommend 3-5 drills that would be most beneficial.
            
            Consider:
            - Current skill level and areas for improvement
            - Recent drill performance and ratings
            - Categories they haven't practiced recently
            - Progressive skill development
            - Variety to keep practice interesting
            
            Respond in JSON format with the following structure:
            {
              "recommendations": [
                {
                  "drillId": "drill_id_here",
                  "reason": "Brief explanation why this drill is recommended",
                  "priority": "high" | "medium" | "low"
                }
              ],
              "focusArea": "Main skill area to work on",
              "motivationalMessage": "Encouraging message about their progress"
            }
            
            Respond with raw JSON only. Do not include code blocks, markdown, or any other formatting.`},{role:"user",content:`Please analyze this player's data and recommend drills: ${JSON.stringify(a)}`}],max_tokens:500,temperature:.7,response_format:{type:"json_object"}})});if(!o.ok)throw Error("Failed to get AI recommendations");let l=await o.json(),c=JSON.parse(l.choices[0]?.message?.content||"{}"),u=await Promise.all((c.recommendations||[]).map(async e=>{let r=await d._.drill.findUnique({where:{id:e.drillId}});return{...e,drill:r||null}}));return s.NextResponse.json({...c,recommendations:u.filter(e=>null!==e.drill)})}catch(r){console.error("Error getting drill recommendations:",r);let e=await m(i);return s.NextResponse.json(e)}}async function m(e){try{let r=await d._.playerProfile.findUnique({where:{userId:e}}),t=(await d._.drillCompletion.findMany({where:{userId:e},orderBy:{completedAt:"desc"},take:5})).map(e=>e.drillId),i=r?.skillLevel||"beginner";return{recommendations:(await d._.drill.findMany({where:{skillLevel:i,id:{notIn:t}},take:3})).map(e=>({drillId:e.id,drill:e,reason:`Great for ${i} players to improve ${e.category} skills`,priority:"medium"})),focusArea:"Fundamental Skills",motivationalMessage:"Keep practicing and you'll see improvement!"}}catch(e){return console.error("Error in fallback recommendations:",e),{recommendations:[],focusArea:"Practice",motivationalMessage:"Keep up the great work!"}}}let h=new n.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/ai/drill-recommendation/route",pathname:"/api/ai/drill-recommendation",filename:"route",bundlePath:"app/api/ai/drill-recommendation/route"},resolvedPagePath:"/home/ubuntu/hoopsquest/app/app/api/ai/drill-recommendation/route.ts",nextConfigOutput:"",userland:i}),{requestAsyncStorage:y,staticGenerationAsyncStorage:f,serverHooks:w}=h,g="/api/ai/drill-recommendation/route";function v(){return(0,o.patchFetch)({serverHooks:w,staticGenerationAsyncStorage:f})}},40311:(e,r,t)=>{t.d(r,{L:()=>l});var i=t(66291),n=t(64617),a=t(35970),o=t(3390),s=t.n(o);let l={adapter:(0,n.N)(a._),providers:[(0,i.Z)({name:"credentials",credentials:{email:{label:"Email",type:"email"},password:{label:"Password",type:"password"}},async authorize(e){if(!e?.email||!e?.password)return null;let r=await a._.user.findUnique({where:{email:e.email},include:{playerProfile:!0,children:!0,parent:!0}});return r?.password&&await s().compare(e.password,r.password)?{id:r.id,email:r.email,name:r.name||"",role:r.role,parentId:r.parentId,playerProfile:r.playerProfile,children:r.children,parent:r.parent}:null}})],session:{strategy:"jwt"},callbacks:{jwt:async({token:e,user:r})=>(r&&(e.id=r.id,e.role=r.role,e.parentId=r.parentId,e.playerProfile=r.playerProfile,e.children=r.children,e.parent=r.parent),e),session:async({session:e,token:r})=>(r&&(e.user.id=r.id,e.user.role=r.role,e.user.parentId=r.parentId,e.user.playerProfile=r.playerProfile,e.user.children=r.children,e.user.parent=r.parent),e)},pages:{signIn:"/auth/signin"}}},35970:(e,r,t)=>{t.d(r,{_:()=>n});let i=require("@prisma/client"),n=global.prisma||new i.PrismaClient},64617:(e,r)=>{r.N=void 0,r.N=function(e){return{createUser:r=>e.user.create({data:r}),getUser:r=>e.user.findUnique({where:{id:r}}),getUserByEmail:r=>e.user.findUnique({where:{email:r}}),async getUserByAccount(r){var t;let i=await e.account.findUnique({where:{provider_providerAccountId:r},select:{user:!0}});return null!==(t=null==i?void 0:i.user)&&void 0!==t?t:null},updateUser:({id:r,...t})=>e.user.update({where:{id:r},data:t}),deleteUser:r=>e.user.delete({where:{id:r}}),linkAccount:r=>e.account.create({data:r}),unlinkAccount:r=>e.account.delete({where:{provider_providerAccountId:r}}),async getSessionAndUser(r){let t=await e.session.findUnique({where:{sessionToken:r},include:{user:!0}});if(!t)return null;let{user:i,...n}=t;return{user:i,session:n}},createSession:r=>e.session.create({data:r}),updateSession:r=>e.session.update({where:{sessionToken:r.sessionToken},data:r}),deleteSession:r=>e.session.delete({where:{sessionToken:r}}),async createVerificationToken(r){let t=await e.verificationToken.create({data:r});return t.id&&delete t.id,t},async useVerificationToken(r){try{let t=await e.verificationToken.delete({where:{identifier_token:r}});return t.id&&delete t.id,t}catch(e){if("P2025"===e.code)return null;throw e}}}}},66291:(e,r)=>{r.Z=function(e){return{id:"credentials",name:"Credentials",type:"credentials",credentials:{},authorize:()=>null,options:e}}}};var r=require("../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),i=r.X(0,[372,649,609,390],()=>t(91573));module.exports=i})();